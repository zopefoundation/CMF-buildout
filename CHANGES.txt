HEAD only (unreleased)

  New Features

    - The features of CMFonFive have been folder into CMFCore and
      CMFDefault:

      * Zope 3 menus (browser:menu) are bridged to CMF actions using the
        portal_fiveactions tool. Any menuItem registered will be
        accessible though the portal_actions tool, where the menu for
        which the item was registered will be used as the action
        category.

      * The Zope 3 'cmf' skin layer provides integration between the
        Zope3 standard macros and the CMF main template, by redefining
        five_template.pt.

    - TypeInformation and newstyle Actions: Added i18n support.
      If 'i18n_domain' is specified, 'title' and 'description' are returned as
      MassageID objects instead of strings. This allows to use different i18n
      domains for different TypeInfos and Actions.

    - Replaced user messages by MassageIDs to improve the i18n support.

    - CMFDefault CMFSetup profile: Added CMF BTree Folder to the list of
      automatically instantiated types in the types tool.
      (http://www.zope.org/Collectors/CMF/371)

    - CMFDefault skins: Added members_delete_form.
      This adds a confirmation step to avoid accidental deletion of members.

    - DirectoryView and derived classes can now have metadata associated with
      them just like regular FSObject-derived objects can.

    - DirectoryView and derived classes: It is now possible to customize what 
      gets created to represent directories inside the directory view.
      Previously, the code had a fixed assumption that all directories on the 
      file system must turn into instances of 
      CMFCore.DirectoryView.DirectoryView(Surrogate). It is now possible to 
      register a class deriving from DirectoryView and have that be 
      instantiated instead.

    - ActionsTool: Added new way to define Actions.
      'CMF Action Category' objects can now be added to the portal_actions
      tool and 'CMF Action' objects to categories or subcategories. To
      migrate oldstyle Actions (ActionInformation objects) you can create a
      snapshot and re-import Actions using the portal_setup tool.

    - TypesTool: TypeInformation classes are now pluggable.
      Any class that implements the TypeInformation interface and is
      a registered meta type can now be used in the TypesTool.

  Bug Fixes

    - Got rid of the "CMF Site" and "Configured CMF Site" duality in the ZMI
      add list by removing the "CMF Site" class registration in CMFDefault
      and moving the "Configured CMF Site" registration from CMFSetup into
      CMFDefault, renaming it to "CMF Site". 
      (http://www.zope.org/Collectors/CMF/364)

    - Updated RELEASE.txt and the slurp_release script to now use Subversion
      instead of CVS, and to reflect the new tag/branch naming conventions
      used in the CMF repository.

    - Added testing framework to suppress / examine output from warnings
      module and from zLOG.

    - CMFUid/UniqueIdGeneratorTool.py: Replaced the old BTree.Length.Length
      implementation by a simple counter. Using a BTree.Length.Length object
      as counter may have caused setting the same unique id to multiple 
      objects under high load. The tools counter gets automigrated on the 
      first access. This is a forward port from CMF-1_5-branch before the 
      CMF 1.5.2 release.

    - CMFCore.utils.ToolInit: For icon registration to work with ToolInit
      you would have to have the same product_name parameter as the actual
      product name of the product. Now we just pick up that product name from
      the product context instead, and ignore the product_name parameter (with
      a deprecation warning).

    - CMFSetup: Merged the registerClass and registerIcon call since 
      registerClass is capable of registering icons.

    - DublinCore and PortalFolder: Changed fallback in 'Type' method.
      The fallback is only necessary if the related type info is missing.

    - CMFCore.PortalContent: Wrong variable name in __call__ would blow up
      if no default view could be found for a piece of content.

  Others

    - Refactored and extended CMFDefault.tests.test_join so it can be easily 
      subclassed and reused for alternative membership implementations. All
      that is needed is to ovverride _createPortal to return a portal with
      the desired non-default membership-related tools installed.

    - Remove all "old-style" actions from tools that still carried them 
      (CMFDefault.MembershipTool, CMFDefault.PropertiesTool, 
      CMFDefault.RegistrationTool, CMFDefault.SyndicationTool,
      CMFDefault.DiscussionTool, CMFCore.UndoTool). These have been
      superceded by "new-style" action information objects stored inside
      the Actions Tool.

    - Some simplifications to the slurp_release release helper script and
      updates to the RELEASE.txt release instructions.

    - The CMF now depends on Zope 2.8.1 including Five.

    - Non-release packages moved out of the /CMF/ repository package:

      o hotfixes moved to /CMF_Hotfixes

      o others (CMFCollector, CMFStaging, CMFTracker, CMFWorkspaces)
        moved to /CMF_Extras/

    - To document how to create a CMF release from CMF a description is now
      included in RELEASE.txt at the root of the CMF package. This text can
      guide release managers or volunteers with the appropriate release
      privileges.

    - Added DeprecationWarning to the all_cmf_tests.py script. The canonical
      way to run the tests is using "zopectl test".
      (http://www.zope.org/Collectors/CMF/272)

    - CMFDefault: Oldstyle DefaultWorkflowDefinition is no longer registered.
      So you can't accidentally add this deprecated workflow.

    - The "Access future portal content" was not used anywhere and has been
      removed. (http://www.zope.org/Collectors/CMF/240)

    - CMFDefault: Marked 'manage_addCMFSite' as deprecated.
      To add a new CMF site, select 'Configured CMF Site'. The 'CMFDefault
      Site' profile creates a new site like those you know from 'CMF Site'.

    - CMFDefault: Cleaned out some super-ancient code for migrating
      or fixing PTK content so it would work with CMF.

    - CatalogTool: Removed deprecated indexes and metadata.
      'Creator' was replaced by 'listCreators', 'portal_type' should be used
      instead of 'meta_type'.

    - CMFCore: Removed some deprecated aliases and constants.

    - Permissions: Removed deprecated oldstyle permission modules.

    - TypeInformation: Removed deprecated Type method.

    - PortalFolder: Removed deprecated _morphSpec() and spec arguments.

    - Portal Types: Removed deprecated _getViewFor / getActionById machinery.
      PortalContent objects might be used as methods, so __call__() still
      returns their default view.

    - CMFDefault and CMFTopic skins: Removed deprecated DTML skins and layers.

    - ActionsTool: Removed deprecated support for oldstyle Action Providers.
      If Action Providers don't implement the ActionProvider interface they
      are now ignored.

    - Workflow: Removed deprecated WorkflowMethod machinery.

CMF 1.5.x

  For a complete list see CHANGES.txt of CMF-1_5-branch.
